              sp = " "*
             bsp = (" " | "\n")*
             var = < "-" | /[a-zA-Z][\-_a-zA-Z0-9]*/ > { text }

     dbl_escapes = "\\\"" { '"' }
                 | "\\n"  { "\n" }
                 | "\\t"  { "\t" }
                 | "\\\\" { "\\" }
         dbl_seq = < /[^\\"]+/ > { text }
   dbl_not_quote = (dbl_escapes:s | dbl_seq:s)+:ary { ary }
      dbl_string = "\"" dbl_not_quote:s "\"" { @g.str(s.join) }
sgl_escape_quote = "\\'" { "'" }
         sgl_seq = < /[^']/ > { text }
   sgl_not_quote = (sgl_escape_quote | sql_seq)+:segs { segs.join }
      sgl_string = "'" sgl_not_quote:s "'" { @g.str(s) }
          string = dbl_string
                 | sgl_string

       not_slash = ("\\/" | /[^\/]/)+
          regexp = "/" < not_slash > "/" { @g.reg(Regexp.new(text)) }

            char = < /[a-zA-Z0-9]/ > { text }
      char_range = "[" char:l "-" char:r "]" { @g.range(l,r) }

      range_elem = < /([1-9][0-9]*)|\*/ > { text }
      mult_range = "[" sp range_elem:l sp "," sp range_elem:r sp "]" { [l,r] }

     curly_block = curly
           curly = "{" < (/[^{}]+/ | curly)* > "}" { @g.action(text) }

           value = value:v ":" var:n { @g.t(v,n) }
                 | value:v "?" { @g.maybe(v) }
                 | value:v "+" { @g.many(v) }
                 | value:v "*" { @g.kleene(v) }
                 | value:v mult_range:r { @g.multiple(v, *r) }
                 | "&" value:v { @g.andp(v) }
                 | "!" value:v { @g.notp(v) }
                 | "(" bsp expression:o bsp ")" { o }
                 | "<" bsp expression:o bsp ">" { @g.collect(o) }
                 | curly_block
                 | "." { @g.dot }
                 | var:name !(sp "=") { @g.ref(name) }
                 | char_range
                 | regexp
                 | string

          spaces = (" " | "\n")+
          values = values:s spaces value:v { @g.seq(s, v) }
                 | value:l spaces value:r  { @g.seq(l, r) }
                 | value
     choose_cont = bsp "|" bsp values:v { v }
      expression = values:v choose_cont+:alts { @g.any(v, *alts) }
                 | values
      assignment = sp var:v sp "=" sp expression:o { @g.set(v, o) }
     assignments = assignment (bsp assignments)?
            root = assignments sp "\n"?
